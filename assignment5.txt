ASSIGNMENT-5
Q1) A barcode scanner for Universal Product Codes (UPCs) verifies the 12-digit code scanned by
comparing the code’s last digit (called a check digit) to its own computation of the check digit
from the first 11 digits as follows:
1. Calculate the sum of the digits in the odd-numbered positions (the first, third, ..., eleventh
digits) and multiply this sum by 3.
2. Calculate the sum of the digits in the even-numbered positions (the second, fourth, ...,
tenth digits) and add this to the previous result.
3. If the last digit of the result from step 2 is 0, then 0 is the check digit. Otherwise, subtract
the last digit from 10 to calculate the check digit.
4. If the check digit matches the final digit of the 12-digit UPC, the UPC is assumed correct.

#include <stdio.h>

int main()
{
    int odd_sum=0,ans1=0,even_sum=0,ans2=0,check_digit=-1;
    int code[12];

    for(int i=0;i<12;i++)
    {
        scanf("%d", &code[i]);
    }

    // step-1
    for(int i=0;i<11;i+=2)
    {
        odd_sum+=code[i];
    }

    ans1=odd_sum*3;

    // step-2
    for(int i=1;i<11;i+=2)
    {
        even_sum+=code[i];
    }

    ans2=ans1+even_sum;

    // STEP-3
    if(ans2%10==0)
    check_digit=0;
    else
    check_digit=10-(ans2%10);

    // step-4
    if(check_digit==code[11])
    printf("UPC is correct.");

    else
    printf("UPC is incorrect.");
}

Q2) Write a program to take two numerical lists of the same length ended by a sentinel value and
store the lists in arrays x and y, each of which has 20 elements. Let n be the actual number
of data values in each list. Store the product of corresponding elements of x and y in a third
array, z, also of size 20. Display the arrays x, y, and z in a three-column table. Then compute
and display the square root of the sum of the items in z.

#include <stdio.h>
#include <math.h>

int main()
{
    int range=20;
    int x[range];
    int y[range];
    int z[range];

    int n=0,sentinel_value=-1,value,sums=0;
    double sqrt_ans;

    while(n<range)
    {
        printf("Enter value: ");
        scanf("%d",&value);

        if(value==sentinel_value)
        break;

        x[n++]=value;
    }

    for(int i=0;i<n;i++)
    {
        printf("Enter number: ");
        scanf("%d",&y[i]);
    }

    for(int i=0;i<n;i++)
    {
        z[i]=x[i]*y[i];
        sums+=z[i];
    }
    for(int i=0;i<n;i++)
    {
        printf("%d\t\t%d\t\t%d\n",x[i],y[i],z[i]);
    }

    sqrt_ans=sqrt(sums);
    printf("Square root value i: %lf",sqrt_ans);
}

Q3) Write and test a function deblank that takes a string output and a string input argument and
returns a copy of the input argument with all blanks removed.

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char* deblank(char input[])
{
    int i,j=0;
    char *ans=(char*)malloc((strlen(input) + 1) * sizeof(char));;

   for(i=0;i<strlen(input);i++)
   {
        if(input[i]!=' ')
        {
            ans[j]=input[i];
            j++;
        }
   }
    ans[j]='\0';
    return ans;
}
int main()
{
    char *ans=deblank("Shrie Lone");
    printf("Answer is: %s",ans);
    return 0;
}

Q4) Write and test a recursive function that returns the value of the following recursive definition:

f(x) = 0 if x ≤ 0
f(x) = f(x − 1) + 2 otherwise
What set of numbers is generated by this definition?

#include <stdio.h>

int f(int x)
{
    if(x<=0)
    return 0;

    else
    return f(x-1)+2;
}
int main()
{
    int x,ans;
    printf("Enter value of x: ");
    scanf("%d",&x);

    ans=f(x);
    printf("Answer is: %d",ans);
}